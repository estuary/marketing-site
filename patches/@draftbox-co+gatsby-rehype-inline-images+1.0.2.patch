diff --git a/node_modules/@draftbox-co/gatsby-rehype-inline-images/gatsby-node.js b/node_modules/@draftbox-co/gatsby-rehype-inline-images/gatsby-node.js
index 320309d..f5d6444 100644
--- a/node_modules/@draftbox-co/gatsby-rehype-inline-images/gatsby-node.js
+++ b/node_modules/@draftbox-co/gatsby-rehype-inline-images/gatsby-node.js
@@ -9,7 +9,7 @@ const {
 } = require(`gatsby-source-filesystem`);
 
 const {
-  fluid
+  generateImageData
 } = require(`gatsby-plugin-sharp`);
 
 const sharp = require(`sharp`);
@@ -28,7 +28,7 @@ var parse = require('rehype-parse');
 
 const getContext = (node, field) => node && node.context && node.context[field];
 
-module.exports = async ({
+module.exports = {default: async ({
   htmlAst,
   htmlNode,
   actions: {
@@ -56,10 +56,6 @@ module.exports = async ({
 
   const cmsUrl = _.head(_.split(url, slug, 1));
 
-  if (!isUrl(cmsUrl)) {
-    return htmlAst;
-  }
-
   const nodes = [];
   visit(htmlAst, {
     tagName: `img`
@@ -83,7 +79,7 @@ module.exports = async ({
     return node;
   }));
   return htmlAst;
-};
+}};
 
 const replaceNewImage = async (node, cache, store, createNode, createNodeId, reporter, options) => {
   //console.log(node);
@@ -153,50 +149,24 @@ const generateImagesAndUpdateNode = async function ({
 
   try {
     await sharp(imageNode.absolutePath).metadata();
-    let fluidResultWebp;
-    let fluidResult = await fluid({
+    let imageData = await generateImageData({
       file: imageNode,
       args: Object.assign(Object.assign({}, options), {}, {
-        maxWidth: formattedImgTag.width || options.maxWidth
+        layout: "constrained",
+        width: formattedImgTag.width || options.maxWidth,
+        quality: options.quality 
       }),
       reporter,
       cache
     });
 
-    if (options.withWebp) {
-      fluidResultWebp = await fluid({
-        file: imageNode,
-        args: Object.assign(Object.assign({}, options), {}, {
-          maxWidth: formattedImgTag.width || options.maxWidth,
-          toFormat: "WEBP"
-        }),
-        reporter,
-        cache
-      });
-    }
-
-    if (!fluidResult) return;
-
-    if (options.withWebp) {
-      fluidResult.srcSetWebp = fluidResultWebp.srcSet;
-    }
+    if (!imageData) return;
 
     const imgOptions = {
-      fluid: fluidResult,
-      style: {
-        maxWidth: "100%"
-      },
-      // Force show full image instantly
-      // critical: true, // depricated
-      loading: "eager",
+      imgData: JSON.stringify(imageData),
       alt: formattedImgTag.alt,
-      // fadeIn: true,
-      imgStyle: {
-        opacity: 1
-      }
     };
-    if (formattedImgTag.width) imgOptions.style.width = formattedImgTag.width;
-    const ReactImgEl = React.createElement(Img.default, imgOptions, null);
+    const ReactImgEl = React.createElement("img-sharp-inline", imgOptions, null);
     return ReactDOMServer.renderToString(ReactImgEl);
   } catch (e) {
     console.log('err', e);
